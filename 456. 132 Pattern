Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.Note: n will be less than 15,000.Example 1:Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
Example 2:Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
Subscribe to see which companies asked this question.

class Solution {public:    bool find132pattern(vector<int>& nums) {        stack<pair<int,int>> stk;//小数和大数。        for(int i = 0;i<nums.size();i++)        {            if(stk.size()==0 || nums[i]<stk.top().first)                 stk.push(pair<int,int>(nums[i],nums[i]));            else if(nums[i]>stk.top().first)            {                pair<int,int> last = stk.top();                if(nums[i]<last.second) return true;                else                {                    //                    last.second = nums[i];                    //把堆栈里面所有大数小于当前值的pair全部pop出来.                    while(stk.size()>0 && stk.top().second<=nums[i]) stk.pop();                    //现在可以看看堆栈里面小数是不是也小于当前数？                    if(stk.size()>0&& stk.top().first<nums[i]) return true;                    //then push the update number into stack.                    stk.push(last);                }            }        }        return false;    }};
